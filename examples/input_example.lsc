# Example script demonstrating the new input system
# This script shows how to use actions, key constants, and mouse input
extends Node2D

# Called when the node enters the scene tree
func _ready():
    print("Input Example Script Loaded!")
    print("Available input actions:")
    print("- move_left, move_right, move_up, move_down")
    print("- ui_left, ui_right, ui_up, ui_down")
    print("- jump, interact, run, pause")
    print("")
    print("Try pressing keys to see input detection!")

# Called every frame
func _process(delta: float):
    # Example: Check for movement actions
    var movement = Vector2.ZERO
    
    if is_action_pressed("move_left"):
        movement.x -= 1
    if is_action_pressed("move_right"):
        movement.x += 1
    if is_action_pressed("move_up"):
        movement.y -= 1
    if is_action_pressed("move_down"):
        movement.y += 1
    
    # Only print when movement changes
    if movement != Vector2.ZERO:
        print("Movement input: ", movement)
    
    # Example: Check for "just pressed" actions
    if is_action_just_pressed("jump"):
        print("Jump action just pressed!")
    
    if is_action_just_pressed("interact"):
        print("Interact action just pressed!")
    
    if is_action_just_pressed("pause"):
        print("Pause action just pressed!")
    
    # Example: Check for action strength (useful for analog inputs)
    var run_strength = get_action_strength("run")
    if run_strength > 0:
        print("Run action strength: ", run_strength)

# Called when a key is pressed
func on_key_press(key: int, modifiers: int):
    print("Key pressed: ", key)
    
    # Example: Check specific key constants
    if key == KEY_SPACE:
        print("Space key pressed!")
    elif key == KEY_ENTER:
        print("Enter key pressed!")
    elif key == KEY_ESCAPE:
        print("Escape key pressed!")
    elif key == KEY_W:
        print("W key pressed!")
    elif key == KEY_A:
        print("A key pressed!")
    elif key == KEY_S:
        print("S key pressed!")
    elif key == KEY_D:
        print("D key pressed!")

# Called when a key is released
func on_key_release(key: int, modifiers: int):
    print("Key released: ", key)

# Called when mouse button is pressed
func on_mouse_press(button: int, position: Vector2):
    print("Mouse button pressed: ", button, " at position: ", position)
    
    # Example: Check specific mouse button constants
    if button == MOUSE_BUTTON_LEFT:
        print("Left mouse button pressed!")
    elif button == MOUSE_BUTTON_RIGHT:
        print("Right mouse button pressed!")
    elif button == MOUSE_BUTTON_MIDDLE:
        print("Middle mouse button pressed!")

# Example function showing how to check raw key input
func check_raw_keys():
    # Check if specific keys are currently pressed
    if is_key_pressed(KEY_SHIFT):
        print("Shift is currently held down")
    
    if is_key_pressed(KEY_CTRL):
        print("Ctrl is currently held down")
    
    if is_key_pressed(KEY_ALT):
        print("Alt is currently held down")

# Example function showing mouse input
func check_mouse_input():
    # Get current mouse position
    var mouse_pos = get_mouse_position()
    print("Mouse position: ", mouse_pos)
    
    # Check if mouse buttons are pressed
    if is_mouse_button_pressed(MOUSE_BUTTON_LEFT):
        print("Left mouse button is held down")
    
    if is_mouse_button_pressed(MOUSE_BUTTON_RIGHT):
        print("Right mouse button is held down")

# Example of creating custom input combinations
func check_custom_combinations():
    # Example: Check for Ctrl+S (save)
    if is_key_pressed(KEY_CTRL) and is_action_just_pressed("ui_accept"):
        print("Ctrl+Enter combination detected!")
    
    # Example: Check for Shift+Click
    if is_key_pressed(KEY_SHIFT) and is_mouse_button_pressed(MOUSE_BUTTON_LEFT):
        print("Shift+Click combination detected!")
