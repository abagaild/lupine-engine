# Interactable NPC - Example NPC for PlayerController demo
extends StaticBody2D

# NPC Properties
export_group("NPC")
export var npc_name: String = "Village Elder"  # NPC name
export var dialogue_text: String = "Hello, traveler! Welcome to our village."  # Dialogue text
export var interaction_text: String = "Press E to talk"  # Interaction prompt
export var has_talked: bool = false  # Whether player has talked to this NPC

# Dialogue system
var dialogue_lines: Array = [
    "Hello, traveler! Welcome to our village.",
    "The chest over there contains a special treasure.",
    "Be careful of the walls - they're quite solid!",
    "Press Shift to run faster, but watch your stamina."
]
var current_dialogue_index: int = 0

# Called when the node enters the scene tree
func _ready():
    print("Interactable NPC ready: ", npc_name)

# Check if this object can be interacted with
func can_interact() -> bool:
    return true  # NPCs can always be talked to

# Handle interaction from player
func interact(player):
    has_talked = true
    
    # Show current dialogue line
    var dialogue = dialogue_lines[current_dialogue_index]
    print(npc_name, " says: ", dialogue)
    
    # Advance to next dialogue line
    current_dialogue_index += 1
    if current_dialogue_index >= dialogue_lines.size():
        current_dialogue_index = 0  # Loop back to beginning
    
    # Emit signal if available
    if has_signal("npc_talked"):
        emit_signal("npc_talked", npc_name, dialogue)

# Get interaction text for UI
func get_interaction_text() -> String:
    return interaction_text

# Get current dialogue
func get_current_dialogue() -> String:
    return dialogue_lines[current_dialogue_index]

# Add new dialogue line
func add_dialogue(text: String):
    dialogue_lines.append(text)

# Set specific dialogue
func set_dialogue(lines: Array):
    dialogue_lines = lines
    current_dialogue_index = 0

# Signal for when NPC is talked to
signal npc_talked(npc_name, dialogue)
