# Node - Base node class for all other nodes
# Provides basic scene tree functionality and common properties

# Base properties
export_group("Node")
export var name: String = "Node"  # Node name in the scene tree
export var visible: bool = true  # Whether the node is visible
export var process_mode: String = "inherit"  # Processing mode: "inherit", "pausable", "when_paused", "always", "disabled"

# Internal properties
var parent: Node = null  # Parent node reference
var children: Array = []  # Array of child nodes
var properties: Dictionary = {}  # Custom properties dictionary
var script_path: String = ""  # Path to attached script

# Called when the node enters the scene tree for the first time
func _ready():
    # Override in derived classes
    pass

# Called every frame (if processing is enabled)
func _process(delta: float):
    # Override in derived classes
    pass

# Called every physics frame (if physics processing is enabled)
func _physics_process(delta: float):
    # Override in derived classes
    pass

# Add a child node
func add_child(child: Node):
    if child.parent:
        child.parent.remove_child(child)
    
    child.parent = self
    children.append(child)

# Remove a child node
func remove_child(child: Node):
    if child in children:
        child.parent = null
        children.erase(child)

# Get child by name
func get_child(child_name: String) -> Node:
    for child in children:
        if child.name == child_name:
            return child
    return null

# Find node by path (e.g., "Child/Grandchild")
func find_node(path: String) -> Node:
    if path == "":
        return self
    
    var parts = path.split("/", false, 1)
    var child_name = parts[0]
    var remaining_path = parts[1] if parts.size() > 1 else ""
    
    var child = get_child(child_name)
    if child:
        return child.find_node(remaining_path)
    
    return null

# Get path from root to this node
func get_path() -> String:
    if not parent:
        return name
    return parent.get_path() + "/" + name

# Get the scene tree root
func get_tree() -> Node:
    var current = self
    while current.parent:
        current = current.parent
    return current

# Check if node is in the scene tree
func is_inside_tree() -> bool:
    return parent != null or get_children().size() > 0

# Get all children
func get_children() -> Array:
    return children.duplicate()

# Get child count
func get_child_count() -> int:
    return children.size()

# Queue the node for deletion
func queue_free():
    # Mark for deletion - will be handled by scene tree
    set_process_mode("disabled")
    visible = false

# Set processing mode
func set_process_mode(mode: String):
    process_mode = mode

# Get processing mode
func get_process_mode() -> String:
    return process_mode

# Set visibility
func set_visible(is_visible: bool):
    visible = is_visible

# Get visibility
func is_visible() -> bool:
    return visible

# Set name
func set_name(new_name: String):
    name = new_name

# Get name
func get_name() -> String:
    return name

# Set custom property
func set_property(property_name: String, value):
    properties[property_name] = value

# Get custom property
func get_property(property_name: String, default_value = null):
    return properties.get(property_name, default_value)

# Check if property exists
func has_property(property_name: String) -> bool:
    return property_name in properties

# Signals
signal tree_entered  # Emitted when node enters scene tree
signal tree_exiting  # Emitted when node is about to exit scene tree
signal ready  # Emitted when node is ready (after _ready is called)
