# Sprite Node - Equivalent to Godot's Sprite2D
# Displays a 2D texture with various transformation and animation options
extends Node2D

# Texture properties
export_group("Texture")
export var texture: path = ""  # The texture to display (uses file browser)
export var normal_map: Texture = null  # Normal map for lighting effects

# Transform properties  
export_group("Transform")
export var centered: bool = true  # Whether the texture is centered on the node
export var offset: Vector2 = Vector2(0, 0)  # Offset from the node's position
export var flip_h: bool = false  # Flip texture horizontally
export var flip_v: bool = false  # Flip texture vertically

# Region properties
export_group("Region")
export var region_enabled: bool = false  # Enable texture region
export var region_rect: Rect2 = Rect2(0, 0, 0, 0)  # Region rectangle
export var region_filter_clip: bool = false  # Filter pixels outside region

# Animation properties
export_group("Animation")
export var hframes: int = 1  # Number of horizontal frames for sprite sheet
export var vframes: int = 1  # Number of vertical frames for sprite sheet
export var frame: int = 0  # Current frame index
export var frame_coords: Vector2 = Vector2(0, 0)  # Frame coordinates (alternative to frame)

# Rendering properties
export_group("Rendering")
export var modulate: Color = Color(1, 1, 1, 1)  # Color modulation
export var self_modulate: Color = Color(1, 1, 1, 1)  # Self modulation (not inherited)

# Internal properties
var _texture_size: Vector2 = Vector2.ZERO
var _frame_size: Vector2 = Vector2.ZERO
var _current_frame_rect: Rect2 = Rect2()

# Called when the node enters the scene tree
func _ready():
    # Update texture information
    _update_texture_info()
    
    # Connect to texture changes if needed
    if texture:
        _update_frame_rect()

# Update texture size and frame information
func _update_texture_info():
    if texture:
        _texture_size = texture.get_size()
        _frame_size = Vector2(_texture_size.x / hframes, _texture_size.y / vframes)
        _update_frame_rect()
    else:
        _texture_size = Vector2.ZERO
        _frame_size = Vector2.ZERO

# Update the current frame rectangle
func _update_frame_rect():
    if not texture:
        _current_frame_rect = Rect2()
        return
    
    var frame_x: int
    var frame_y: int
    
    if frame_coords != Vector2.ZERO:
        # Use frame_coords if set
        frame_x = int(frame_coords.x)
        frame_y = int(frame_coords.y)
    else:
        # Calculate from frame index
        frame_x = frame % hframes
        frame_y = frame / hframes
    
    # Clamp to valid range
    frame_x = clamp(frame_x, 0, hframes - 1)
    frame_y = clamp(frame_y, 0, vframes - 1)
    
    # Calculate frame rectangle
    var x = frame_x * _frame_size.x
    var y = frame_y * _frame_size.y
    
    if region_enabled:
        # Use region if enabled
        x += region_rect.position.x
        y += region_rect.position.y
        _current_frame_rect = Rect2(x, y, 
                                   min(_frame_size.x, region_rect.size.x),
                                   min(_frame_size.y, region_rect.size.y))
    else:
        _current_frame_rect = Rect2(x, y, _frame_size.x, _frame_size.y)

# Get the texture rectangle for rendering
func get_rect() -> Rect2:
    if not texture:
        return Rect2()
    
    var size = _frame_size
    if region_enabled and region_rect.size != Vector2.ZERO:
        size = region_rect.size
    
    var pos = Vector2.ZERO
    if centered:
        pos = -size / 2
    
    pos += offset
    
    return Rect2(pos, size)

# Set the texture
func set_texture(new_texture: Texture):
    texture = new_texture
    _update_texture_info()
    # Emit signal for renderer update
    emit_signal("texture_changed")

# Get the texture
func get_texture() -> Texture:
    return texture

# Set the frame index
func set_frame(new_frame: int):
    frame = clamp(new_frame, 0, hframes * vframes - 1)
    _update_frame_rect()

# Get the frame index
func get_frame() -> int:
    return frame

# Set frame coordinates
func set_frame_coords(coords: Vector2):
    frame_coords = coords
    _update_frame_rect()

# Get frame coordinates
func get_frame_coords() -> Vector2:
    return frame_coords

# Set horizontal frames
func set_hframes(new_hframes: int):
    hframes = max(1, new_hframes)
    _update_texture_info()

# Get horizontal frames
func get_hframes() -> int:
    return hframes

# Set vertical frames
func set_vframes(new_vframes: int):
    vframes = max(1, new_vframes)
    _update_texture_info()

# Get vertical frames
func get_vframes() -> int:
    return vframes

# Set centered property
func set_centered(is_centered: bool):
    centered = is_centered

# Get centered property
func is_centered() -> bool:
    return centered

# Set offset
func set_offset(new_offset: Vector2):
    offset = new_offset

# Get offset
func get_offset() -> Vector2:
    return offset

# Set horizontal flip
func set_flip_h(flip: bool):
    flip_h = flip

# Get horizontal flip
func is_flipped_h() -> bool:
    return flip_h

# Set vertical flip
func set_flip_v(flip: bool):
    flip_v = flip

# Get vertical flip
func is_flipped_v() -> bool:
    return flip_v

# Set region enabled
func set_region_enabled(enabled: bool):
    region_enabled = enabled
    _update_frame_rect()

# Get region enabled
func is_region_enabled() -> bool:
    return region_enabled

# Set region rectangle
func set_region_rect(rect: Rect2):
    region_rect = rect
    if region_enabled:
        _update_frame_rect()

# Get region rectangle
func get_region_rect() -> Rect2:
    return region_rect

# Set modulate color
func set_modulate(color: Color):
    modulate = color

# Get modulate color
func get_modulate() -> Color:
    return modulate

# Set self modulate color
func set_self_modulate(color: Color):
    self_modulate = color

# Get self modulate color
func get_self_modulate() -> Color:
    return self_modulate

# Get the texture size
func get_texture_size() -> Vector2:
    return _texture_size

# Get the frame size
func get_frame_size() -> Vector2:
    return _frame_size

# Get current frame rectangle in texture coordinates
func get_frame_rect() -> Rect2:
    return _current_frame_rect

# Check if the sprite has a valid texture
func has_texture() -> bool:
    return texture != null

# Signals
signal texture_changed  # Emitted when texture changes
signal frame_changed    # Emitted when frame changes
