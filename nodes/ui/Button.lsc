# Button Node - Interactive button UI node with click, hover, and press states
# Supports normal buttons and toggle buttons with full state management
extends Control

# Text
export_group("Text")
export var text: string = "Button"  # button text to display

# Font
export_group("Font")
export var font: Resource = null  # Font or BitmapFont resource
export var font_size: int = 14  # font size for text
export var font_style: string = "Regular"  # "Regular", "Bold", "Italic"

# Button Colors
export_group("Button Colors")
export var normal_color: Color = Color(0.3, 0.3, 0.3, 1.0)  # default button background
export var hover_color: Color = Color(0.4, 0.4, 0.4, 1.0)  # background when hovered
export var pressed_color: Color = Color(0.2, 0.2, 0.2, 1.0)  # background when pressed
export var disabled_color: Color = Color(0.15, 0.15, 0.15, 1.0)  # background when disabled
export var font_color: Color = Color(1.0, 1.0, 1.0, 1.0)  # text color

# Style
export_group("Style")
export var corner_radius: float = 4.0  # rounded corner radius
export var border_width: float = 1.0  # border thickness
export var border_color: Color = Color(0.5, 0.5, 0.5, 1.0)  # border color

# Behavior
export_group("Behavior")
export var disabled: bool = false  # whether button is disabled
export var toggle_mode: bool = false  # if true, button acts as toggle
export var pressed: bool = false  # current pressed state (for toggle mode)

# Internal state (not exported)
var _is_hovered: bool = false
var _is_mouse_pressed: bool = false

# Called when the node enters the scene tree
func _ready():
    super._ready()
    
    # Set default size if not specified
    if rect_size == Vector2.ZERO:
        rect_size = Vector2(100, 30)

# Called every frame
func _process(delta: float):
    # Handle mouse interaction
    _update_mouse_state()

# Update mouse interaction state
func _update_mouse_state():
    if disabled:
        _is_hovered = false
        _is_mouse_pressed = false
        return
    
    # Get mouse position
    var mouse_pos = get_global_mouse_position()
    var button_rect = get_global_rect()
    
    # Check if mouse is over button
    var was_hovered = _is_hovered
    _is_hovered = button_rect.has_point(mouse_pos)
    
    # Emit hover signals
    if _is_hovered and not was_hovered:
        emit_signal("mouse_entered")
    elif not _is_hovered and was_hovered:
        emit_signal("mouse_exited")

# Handle mouse button press
func _on_mouse_press(button: int, position: Vector2):
    if disabled or button != MOUSE_BUTTON_LEFT:
        return
    
    var button_rect = get_global_rect()
    if button_rect.has_point(position):
        _is_mouse_pressed = true
        emit_signal("button_down")

# Handle mouse button release
func _on_mouse_release(button: int, position: Vector2):
    if disabled or button != MOUSE_BUTTON_LEFT:
        return
    
    var was_pressed = _is_mouse_pressed
    _is_mouse_pressed = false
    
    if was_pressed:
        emit_signal("button_up")
        
        # Check if release is still over button (complete click)
        var button_rect = get_global_rect()
        if button_rect.has_point(position):
            _on_button_clicked()

# Handle button click
func _on_button_clicked():
    if disabled:
        return
    
    if toggle_mode:
        # Toggle the pressed state
        pressed = not pressed
        emit_signal("toggled", pressed)
    
    # Always emit pressed signal
    emit_signal("pressed")

# Get the current visual state color
func get_current_color() -> Color:
    if disabled:
        return disabled_color
    elif _is_mouse_pressed or (toggle_mode and pressed):
        return pressed_color
    elif _is_hovered:
        return hover_color
    else:
        return normal_color

# Set button text
func set_text(new_text: string):
    text = new_text
    emit_signal("appearance_changed")

# Get button text
func get_text() -> string:
    return text

# Set disabled state
func set_disabled(is_disabled: bool):
    disabled = is_disabled
    if disabled:
        _is_hovered = false
        _is_mouse_pressed = false
    emit_signal("appearance_changed")

# Get disabled state
func is_disabled() -> bool:
    return disabled

# Set toggle mode
func set_toggle_mode(enable_toggle: bool):
    toggle_mode = enable_toggle
    if not toggle_mode:
        pressed = false
    emit_signal("appearance_changed")

# Get toggle mode
func is_toggle_mode() -> bool:
    return toggle_mode

# Set pressed state (for toggle buttons)
func set_pressed(is_pressed: bool):
    if toggle_mode:
        pressed = is_pressed
        emit_signal("appearance_changed")
        emit_signal("toggled", pressed)

# Get pressed state
func is_pressed() -> bool:
    return pressed

# Set normal color
func set_normal_color(color: Color):
    normal_color = color
    emit_signal("appearance_changed")

# Set hover color
func set_hover_color(color: Color):
    hover_color = color
    emit_signal("appearance_changed")

# Set pressed color
func set_pressed_color(color: Color):
    pressed_color = color
    emit_signal("appearance_changed")

# Set disabled color
func set_disabled_color(color: Color):
    disabled_color = color
    emit_signal("appearance_changed")

# Set font color
func set_font_color(color: Color):
    font_color = color
    emit_signal("appearance_changed")

# Get the effective rect for drawing
func get_draw_rect() -> Rect2:
    return Rect2(position, rect_size)

# Get global rect for mouse interaction
func get_global_rect() -> Rect2:
    # For UI nodes, global position is the same as position
    return Rect2(position, rect_size)

# Check if a point is inside the button
func has_point(point: Vector2) -> bool:
    var rect = get_draw_rect()
    return rect.has_point(point)

# Simulate button press (for programmatic activation)
func emit_pressed():
    if not disabled:
        _on_button_clicked()

# Signals
signal pressed  # Emitted when button is clicked
signal button_down  # Emitted when mouse button is pressed on button
signal button_up  # Emitted when mouse button is released
signal toggled(pressed: bool)  # Emitted when toggle button state changes
signal mouse_entered  # Emitted when mouse enters button area
signal mouse_exited  # Emitted when mouse exits button area
signal appearance_changed  # Emitted when visual properties change

# Input event constants (would be defined in engine)
const MOUSE_BUTTON_LEFT = 1
const MOUSE_BUTTON_RIGHT = 2
const MOUSE_BUTTON_MIDDLE = 3

# Debug info
func get_debug_info() -> string:
    var state = "normal"
    if disabled:
        state = "disabled"
    elif _is_mouse_pressed or (toggle_mode and pressed):
        state = "pressed"
    elif _is_hovered:
        state = "hovered"
    
    return f"Button: '{text}', State: {state}, Toggle: {toggle_mode}, Pressed: {pressed}"
