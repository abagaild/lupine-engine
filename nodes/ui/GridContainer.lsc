# GridContainer Node - Container that arranges children in a grid layout
# Automatically arranges child Control nodes in a grid with configurable columns and spacing
extends Control

# Grid Properties
export_group("Grid")
export var columns: int = 2  # Number of columns in the grid
export var h_separation: float = 4.0  # Horizontal space between children
export var v_separation: float = 4.0  # Vertical space between children

# Container Margins (space inside the container)
export_group("Container Margins")
export var container_margin_left: float = 0.0  # Left margin inside container
export var container_margin_top: float = 0.0  # Top margin inside container
export var container_margin_right: float = 0.0  # Right margin inside container
export var container_margin_bottom: float = 0.0  # Bottom margin inside container

# Style Properties
export_group("Style")
export var background_color: Color = Color(0.0, 0.0, 0.0, 0.0)  # Background color (transparent by default)
export var border_color: Color = Color(0.5, 0.5, 0.5, 1.0)  # Border color
export var border_width: float = 0.0  # Border thickness
export var corner_radius: float = 0.0  # Corner radius for rounded borders

# Called when the node enters the scene tree for the first time
func _ready():
    super._ready()
    
    # Set default size if not specified
    if rect_size == Vector2.ZERO:
        rect_size = Vector2(200, 200)
    
    # Arrange children initially
    _arrange_children()

# Called every frame. 'delta' is the elapsed time since the previous frame
func _process(delta: float):
    pass

# Called when children are added or removed
func _notification(what: int):
    if what == NOTIFICATION_RESIZED or what == NOTIFICATION_CHILD_ORDER_CHANGED:
        _arrange_children()

# Arrange children in grid layout
func _arrange_children():
    var child_controls = []
    
    # Collect all Control children
    for child in get_children():
        if child is Control and child.visible:
            child_controls.append(child)
    
    if child_controls.size() == 0 or columns <= 0:
        return
    
    # Calculate available space
    var available_width = rect_size.x - container_margin_left - container_margin_right
    var available_height = rect_size.y - container_margin_top - container_margin_bottom
    
    # Calculate grid dimensions
    var rows = ceil(float(child_controls.size()) / float(columns))
    
    # Calculate cell size
    var total_h_separation = h_separation * max(0, columns - 1)
    var total_v_separation = v_separation * max(0, rows - 1)
    
    var cell_width = (available_width - total_h_separation) / columns
    var cell_height = (available_height - total_v_separation) / rows
    
    # Position children in grid
    for i in range(child_controls.size()):
        var child = child_controls[i]
        
        # Calculate grid position
        var col = i % columns
        var row = i / columns
        
        # Calculate child position
        var child_x = container_margin_left + col * (cell_width + h_separation)
        var child_y = container_margin_top + row * (cell_height + v_separation)
        
        # Set child position and size
        child.position.x = child_x
        child.position.y = child_y
        child.rect_size.x = cell_width
        child.rect_size.y = cell_height

# Set number of columns
func set_columns(cols: int):
    columns = max(1, cols)
    _arrange_children()
    emit_signal("layout_changed")

# Get number of columns
func get_columns() -> int:
    return columns

# Set horizontal separation
func set_h_separation(sep: float):
    h_separation = max(0.0, sep)
    _arrange_children()
    emit_signal("layout_changed")

# Get horizontal separation
func get_h_separation() -> float:
    return h_separation

# Set vertical separation
func set_v_separation(sep: float):
    v_separation = max(0.0, sep)
    _arrange_children()
    emit_signal("layout_changed")

# Get vertical separation
func get_v_separation() -> float:
    return v_separation

# Set both separations at once
func set_separation(h_sep: float, v_sep: float):
    h_separation = max(0.0, h_sep)
    v_separation = max(0.0, v_sep)
    _arrange_children()
    emit_signal("layout_changed")

# Set uniform separation (same for horizontal and vertical)
func set_uniform_separation(sep: float):
    set_separation(sep, sep)

# Set container margins
func set_container_margins(left: float, top: float, right: float, bottom: float):
    container_margin_left = max(0.0, left)
    container_margin_top = max(0.0, top)
    container_margin_right = max(0.0, right)
    container_margin_bottom = max(0.0, bottom)
    _arrange_children()
    emit_signal("layout_changed")

# Get container margins as array [left, top, right, bottom]
func get_container_margins() -> Array:
    return [container_margin_left, container_margin_top, container_margin_right, container_margin_bottom]

# Set background color
func set_background_color(color: Color):
    background_color = color
    emit_signal("appearance_changed")

# Get background color
func get_background_color() -> Color:
    return background_color

# Set border properties
func set_border(width: float, color: Color):
    border_width = max(0.0, width)
    border_color = color
    emit_signal("appearance_changed")

# Get border width
func get_border_width() -> float:
    return border_width

# Get border color
func get_border_color() -> Color:
    return border_color

# Set corner radius
func set_corner_radius(radius: float):
    corner_radius = max(0.0, radius)
    emit_signal("appearance_changed")

# Get corner radius
func get_corner_radius() -> float:
    return corner_radius

# Add child and arrange layout
func add_child(child: Node):
    super.add_child(child)
    if child is Control:
        _arrange_children()
        emit_signal("layout_changed")

# Remove child and arrange layout
func remove_child(child: Node):
    super.remove_child(child)
    if child is Control:
        _arrange_children()
        emit_signal("layout_changed")

# Get number of rows needed for current children
func get_rows() -> int:
    var child_count = 0
    for child in get_children():
        if child is Control and child.visible:
            child_count += 1
    
    if child_count == 0 or columns <= 0:
        return 0
    
    return ceil(float(child_count) / float(columns))

# Get minimum size needed for all children
func get_minimum_size() -> Vector2:
    var child_count = 0
    var max_child_width = 0.0
    var max_child_height = 0.0
    
    for child in get_children():
        if child is Control and child.visible:
            max_child_width = max(max_child_width, child.rect_min_size.x)
            max_child_height = max(max_child_height, child.rect_min_size.y)
            child_count += 1
    
    if child_count == 0 or columns <= 0:
        return Vector2(container_margin_left + container_margin_right,
                      container_margin_top + container_margin_bottom)
    
    var rows = ceil(float(child_count) / float(columns))
    
    var min_width = columns * max_child_width + h_separation * max(0, columns - 1)
    var min_height = rows * max_child_height + v_separation * max(0, rows - 1)
    
    min_width += container_margin_left + container_margin_right
    min_height += container_margin_top + container_margin_bottom
    
    return Vector2(min_width, min_height)

# Fit container to content
func fit_to_content():
    rect_size = get_minimum_size()
    _arrange_children()
    emit_signal("layout_changed")

# Get content rectangle (area available for children)
func get_content_rect() -> Rect2:
    return Rect2(
        container_margin_left,
        container_margin_top,
        rect_size.x - container_margin_left - container_margin_right,
        rect_size.y - container_margin_top - container_margin_bottom
    )

# Get cell size for current layout
func get_cell_size() -> Vector2:
    if columns <= 0:
        return Vector2.ZERO
    
    var available_width = rect_size.x - container_margin_left - container_margin_right
    var available_height = rect_size.y - container_margin_top - container_margin_bottom
    
    var rows = get_rows()
    if rows <= 0:
        return Vector2.ZERO
    
    var total_h_separation = h_separation * max(0, columns - 1)
    var total_v_separation = v_separation * max(0, rows - 1)
    
    var cell_width = (available_width - total_h_separation) / columns
    var cell_height = (available_height - total_v_separation) / rows
    
    return Vector2(cell_width, cell_height)

# Get child position in grid (returns Vector2 with x=column, y=row)
func get_child_grid_position(child: Control) -> Vector2:
    var index = -1
    var current_index = 0
    
    for c in get_children():
        if c is Control and c.visible:
            if c == child:
                index = current_index
                break
            current_index += 1
    
    if index < 0:
        return Vector2(-1, -1)
    
    var col = index % columns
    var row = index / columns
    return Vector2(col, row)

# Convenience methods for margins
func set_uniform_margin(margin: float):
    set_container_margins(margin, margin, margin, margin)

func set_horizontal_margins(margin: float):
    set_container_margins(margin, container_margin_top, margin, container_margin_bottom)

func set_vertical_margins(margin: float):
    set_container_margins(container_margin_left, margin, container_margin_right, margin)

# Convenience methods for common grid layouts
func make_square_grid():
    """Make the grid as square as possible"""
    var child_count = 0
    for child in get_children():
        if child is Control and child.visible:
            child_count += 1
    
    if child_count > 0:
        set_columns(ceil(sqrt(child_count)))

func make_single_row():
    """Arrange all children in a single row"""
    var child_count = 0
    for child in get_children():
        if child is Control and child.visible:
            child_count += 1
    
    set_columns(max(1, child_count))

func make_single_column():
    """Arrange all children in a single column"""
    set_columns(1)

# Signals
signal layout_changed  # Emitted when layout properties change
signal appearance_changed  # Emitted when visual properties change
