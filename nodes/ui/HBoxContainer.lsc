# HBoxContainer Node - Horizontal container that arranges children horizontally
# Automatically arranges child Control nodes in a horizontal layout with spacing and alignment
extends Control

# Container Properties
export_group("Container")
export var separation: float = 4.0  # Space between children in pixels
export var alignment: String = "left"  # Horizontal alignment: "left", "center", "right"

# Container Margins (space inside the container)
export_group("Container Margins")
export var container_margin_left: float = 0.0  # Left margin inside container
export var container_margin_top: float = 0.0  # Top margin inside container
export var container_margin_right: float = 0.0  # Right margin inside container
export var container_margin_bottom: float = 0.0  # Bottom margin inside container

# Style Properties
export_group("Style")
export var background_color: Color = Color(0.0, 0.0, 0.0, 0.0)  # Background color (transparent by default)
export var border_color: Color = Color(0.5, 0.5, 0.5, 1.0)  # Border color
export var border_width: float = 0.0  # Border thickness
export var corner_radius: float = 0.0  # Corner radius for rounded borders

# Alignment constants
const ALIGN_LEFT = "left"
const ALIGN_CENTER = "center"
const ALIGN_RIGHT = "right"

# Called when the node enters the scene tree for the first time
func _ready():
    super._ready()
    
    # Set default size if not specified
    if rect_size == Vector2.ZERO:
        rect_size = Vector2(100, 100)
    
    # Arrange children initially
    _arrange_children()

# Called every frame. 'delta' is the elapsed time since the previous frame
func _process(delta: float):
    pass

# Called when children are added or removed
func _notification(what: int):
    if what == NOTIFICATION_RESIZED or what == NOTIFICATION_CHILD_ORDER_CHANGED:
        _arrange_children()

# Arrange children horizontally
func _arrange_children():
    var child_controls = []
    
    # Collect all Control children
    for child in get_children():
        if child is Control and child.visible:
            child_controls.append(child)
    
    if child_controls.size() == 0:
        return
    
    # Calculate available space
    var available_width = rect_size.x - container_margin_left - container_margin_right
    var available_height = rect_size.y - container_margin_top - container_margin_bottom
    
    # Calculate total separation space
    var total_separation = separation * max(0, child_controls.size() - 1)
    
    # Calculate total minimum width needed
    var total_min_width = 0.0
    var expanding_children = []
    
    for child in child_controls:
        total_min_width += child.rect_min_size.x
        if child.size_flags.get("expand_h", false):
            expanding_children.append(child)
    
    # Calculate remaining space for expanding children
    var remaining_width = available_width - total_min_width - total_separation
    var expand_width_per_child = 0.0
    
    if expanding_children.size() > 0 and remaining_width > 0:
        expand_width_per_child = remaining_width / expanding_children.size()
    
    # Position children
    var current_x = container_margin_left
    
    # Apply horizontal alignment
    if alignment == ALIGN_CENTER:
        var total_content_width = total_min_width + total_separation
        if expanding_children.size() > 0:
            total_content_width += remaining_width
        current_x += (available_width - total_content_width) * 0.5
    elif alignment == ALIGN_RIGHT:
        var total_content_width = total_min_width + total_separation
        if expanding_children.size() > 0:
            total_content_width += remaining_width
        current_x += available_width - total_content_width
    
    for i in range(child_controls.size()):
        var child = child_controls[i]
        
        # Calculate child width
        var child_width = child.rect_min_size.x
        if child in expanding_children:
            child_width += expand_width_per_child
        
        # Set child position and size
        child.position.x = current_x
        child.position.y = container_margin_top
        child.rect_size.x = child_width
        child.rect_size.y = available_height
        
        # Move to next position
        current_x += child_width + separation

# Set separation between children
func set_separation(sep: float):
    separation = max(0.0, sep)
    _arrange_children()
    emit_signal("layout_changed")

# Get separation between children
func get_separation() -> float:
    return separation

# Set horizontal alignment
func set_alignment(align: String):
    if is_valid_alignment(align):
        alignment = align
        _arrange_children()
        emit_signal("layout_changed")
    else:
        print("Warning: Invalid alignment: " + align)

# Get horizontal alignment
func get_alignment() -> String:
    return alignment

# Check if alignment is valid
func is_valid_alignment(align: String) -> bool:
    return align in [ALIGN_LEFT, ALIGN_CENTER, ALIGN_RIGHT]

# Set container margins
func set_container_margins(left: float, top: float, right: float, bottom: float):
    container_margin_left = max(0.0, left)
    container_margin_top = max(0.0, top)
    container_margin_right = max(0.0, right)
    container_margin_bottom = max(0.0, bottom)
    _arrange_children()
    emit_signal("layout_changed")

# Get container margins as array [left, top, right, bottom]
func get_container_margins() -> Array:
    return [container_margin_left, container_margin_top, container_margin_right, container_margin_bottom]

# Set background color
func set_background_color(color: Color):
    background_color = color
    emit_signal("appearance_changed")

# Get background color
func get_background_color() -> Color:
    return background_color

# Set border properties
func set_border(width: float, color: Color):
    border_width = max(0.0, width)
    border_color = color
    emit_signal("appearance_changed")

# Get border width
func get_border_width() -> float:
    return border_width

# Get border color
func get_border_color() -> Color:
    return border_color

# Set corner radius
func set_corner_radius(radius: float):
    corner_radius = max(0.0, radius)
    emit_signal("appearance_changed")

# Get corner radius
func get_corner_radius() -> float:
    return corner_radius

# Add child and arrange layout
func add_child(child: Node):
    super.add_child(child)
    if child is Control:
        _arrange_children()
        emit_signal("layout_changed")

# Remove child and arrange layout
func remove_child(child: Node):
    super.remove_child(child)
    if child is Control:
        _arrange_children()
        emit_signal("layout_changed")

# Get minimum size needed for all children
func get_minimum_size() -> Vector2:
    var min_width = 0.0
    var min_height = 0.0
    var child_count = 0
    
    for child in get_children():
        if child is Control and child.visible:
            min_width += child.rect_min_size.x
            min_height = max(min_height, child.rect_min_size.y)
            child_count += 1
    
    # Add separation space
    if child_count > 1:
        min_width += separation * (child_count - 1)
    
    # Add container margins
    min_width += container_margin_left + container_margin_right
    min_height += container_margin_top + container_margin_bottom
    
    return Vector2(min_width, min_height)

# Fit container to content
func fit_to_content():
    rect_size = get_minimum_size()
    _arrange_children()
    emit_signal("layout_changed")

# Get content rectangle (area available for children)
func get_content_rect() -> Rect2:
    return Rect2(
        container_margin_left,
        container_margin_top,
        rect_size.x - container_margin_left - container_margin_right,
        rect_size.y - container_margin_top - container_margin_bottom
    )

# Convenience methods for common alignments
func align_left():
    set_alignment(ALIGN_LEFT)

func align_center():
    set_alignment(ALIGN_CENTER)

func align_right():
    set_alignment(ALIGN_RIGHT)

# Convenience methods for margins
func set_uniform_margin(margin: float):
    set_container_margins(margin, margin, margin, margin)

func set_horizontal_margins(margin: float):
    set_container_margins(margin, container_margin_top, margin, container_margin_bottom)

func set_vertical_margins(margin: float):
    set_container_margins(container_margin_left, margin, container_margin_right, margin)

# Signals
signal layout_changed  # Emitted when layout properties change
signal appearance_changed  # Emitted when visual properties change
