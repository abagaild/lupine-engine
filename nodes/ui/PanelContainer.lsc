# PanelContainer Node - Container that provides a styled background panel for its children
# Combines the functionality of a Panel with container layout management
extends Control

# Container Margins (space inside the panel)
export_group("Container Margins")
export var container_margin_left: float = 8.0  # Left margin inside panel
export var container_margin_top: float = 8.0  # Top margin inside panel
export var container_margin_right: float = 8.0  # Right margin inside panel
export var container_margin_bottom: float = 8.0  # Bottom margin inside panel

# Panel Style Properties
export_group("Panel Style")
export var panel_color: Color = Color(0.2, 0.2, 0.2, 1.0)  # Panel background color (dark gray by default)
export var corner_radius: float = 4.0  # Corner radius for rounded corners
export var border_width: float = 1.0  # Border thickness
export var border_color: Color = Color(0.4, 0.4, 0.4, 1.0)  # Border color (lighter gray by default)

# Advanced Styling
export_group("Advanced Styling")
export var shadow_enabled: bool = false  # Enable drop shadow effect
export var shadow_color: Color = Color(0.0, 0.0, 0.0, 0.5)  # Shadow color (semi-transparent black)
export var shadow_offset: Vector2 = Vector2(2.0, 2.0)  # Shadow offset in pixels
export var shadow_blur: float = 4.0  # Shadow blur radius

# Background Texture
export_group("Background Texture")
export var texture: Texture = null  # Optional background texture
export var texture_mode: String = "stretch"  # Texture display mode

# Panel Behavior
export_group("Panel Behavior")
export var auto_resize: bool = false  # Auto-resize panel to fit children

# Texture mode constants
const TEXTURE_STRETCH = "stretch"
const TEXTURE_TILE = "tile"
const TEXTURE_KEEP = "keep"
const TEXTURE_KEEP_CENTERED = "keep_centered"
const TEXTURE_KEEP_ASPECT = "keep_aspect"
const TEXTURE_KEEP_ASPECT_CENTERED = "keep_aspect_centered"

# Called when the node enters the scene tree for the first time
func _ready():
    super._ready()
    
    # Set default size if not specified
    if rect_size == Vector2.ZERO:
        rect_size = Vector2(100, 100)
    
    # Set clip_contents to true by default for panels
    clip_contents = true
    
    # Arrange children initially
    _arrange_children()
    
    # Connect signals
    connect("resized", self, "_on_resized")
    connect("child_entered_tree", self, "_on_child_added")
    connect("child_exiting_tree", self, "_on_child_removed")

# Called every frame. 'delta' is the elapsed time since the previous frame
func _process(delta: float):
    pass

# Handle resize events
func _on_resized():
    _arrange_children()

# Handle child added
func _on_child_added(child: Node):
    if child is Control:
        _arrange_children()
        emit_signal("layout_changed")

# Handle child removed
func _on_child_removed(child: Node):
    if child is Control:
        _arrange_children()
        emit_signal("layout_changed")

# Called when children are added or removed
func _notification(what: int):
    if what == NOTIFICATION_RESIZED or what == NOTIFICATION_CHILD_ORDER_CHANGED:
        _arrange_children()

# Arrange children within the panel margins
func _arrange_children():
    var child_controls = []
    
    # Collect all Control children
    for child in get_children():
        if child is Control and child.visible:
            child_controls.append(child)
    
    if child_controls.size() == 0:
        return
    
    # Calculate available space inside margins
    var available_width = rect_size.x - container_margin_left - container_margin_right
    var available_height = rect_size.y - container_margin_top - container_margin_bottom
    
    # Position children within the content area
    for child in child_controls:
        # Set child position to start of content area
        child.position.x = container_margin_left
        child.position.y = container_margin_top
        
        # Set child size to fill available space (unless child has specific size requirements)
        if child.size_flags.get("expand_h", false) or child.rect_size.x <= 0:
            child.rect_size.x = available_width
        
        if child.size_flags.get("expand_v", false) or child.rect_size.y <= 0:
            child.rect_size.y = available_height

# Set container margins
func set_container_margins(left: float, top: float, right: float, bottom: float):
    container_margin_left = max(0.0, left)
    container_margin_top = max(0.0, top)
    container_margin_right = max(0.0, right)
    container_margin_bottom = max(0.0, bottom)
    _arrange_children()
    emit_signal("layout_changed")

# Get container margins as array [left, top, right, bottom]
func get_container_margins() -> Array:
    return [container_margin_left, container_margin_top, container_margin_right, container_margin_bottom]

# Set panel color
func set_panel_color(color: Color):
    panel_color = color
    emit_signal("appearance_changed")

# Get panel color
func get_panel_color() -> Color:
    return panel_color

# Set corner radius
func set_corner_radius(radius: float):
    corner_radius = max(0.0, radius)
    emit_signal("appearance_changed")

# Get corner radius
func get_corner_radius() -> float:
    return corner_radius

# Set border properties
func set_border(width: float, color: Color):
    border_width = max(0.0, width)
    border_color = color
    emit_signal("appearance_changed")

# Get border width
func get_border_width() -> float:
    return border_width

# Get border color
func get_border_color() -> Color:
    return border_color

# Set shadow properties
func set_shadow(enabled: bool, color: Color = Color(0.0, 0.0, 0.0, 0.5), offset: Vector2 = Vector2(2.0, 2.0), blur: float = 4.0):
    shadow_enabled = enabled
    shadow_color = color
    shadow_offset = offset
    shadow_blur = max(0.0, blur)
    emit_signal("appearance_changed")

# Enable shadow
func enable_shadow():
    shadow_enabled = true
    emit_signal("appearance_changed")

# Disable shadow
func disable_shadow():
    shadow_enabled = false
    emit_signal("appearance_changed")

# Get shadow enabled state
func is_shadow_enabled() -> bool:
    return shadow_enabled

# Set background texture
func set_texture(new_texture: Texture):
    texture = new_texture
    emit_signal("appearance_changed")

# Get background texture
func get_texture() -> Texture:
    return texture

# Set texture mode
func set_texture_mode(mode: String):
    if is_valid_texture_mode(mode):
        texture_mode = mode
        emit_signal("appearance_changed")
    else:
        print("Warning: Invalid texture mode: " + mode)

# Get texture mode
func get_texture_mode() -> String:
    return texture_mode

# Check if texture mode is valid
func is_valid_texture_mode(mode: String) -> bool:
    return mode in [TEXTURE_STRETCH, TEXTURE_TILE, TEXTURE_KEEP, TEXTURE_KEEP_CENTERED, TEXTURE_KEEP_ASPECT, TEXTURE_KEEP_ASPECT_CENTERED]

# Set auto-resize behavior
func set_auto_resize(enabled: bool):
    auto_resize = enabled
    if enabled:
        fit_to_content()

# Get auto-resize state
func is_auto_resize_enabled() -> bool:
    return auto_resize

# Add child and arrange layout
func add_child(child: Node):
    super.add_child(child)
    if child is Control:
        _arrange_children()
        emit_signal("layout_changed")

# Remove child and arrange layout
func remove_child(child: Node):
    super.remove_child(child)
    if child is Control:
        _arrange_children()
        emit_signal("layout_changed")

# Get minimum size needed for all children plus margins
func get_minimum_size() -> Vector2:
    var min_width = 0.0
    var min_height = 0.0
    
    for child in get_children():
        if child is Control and child.visible:
            min_width = max(min_width, child.rect_min_size.x)
            min_height = max(min_height, child.rect_min_size.y)
    
    # Add container margins
    min_width += container_margin_left + container_margin_right
    min_height += container_margin_top + container_margin_bottom
    
    return Vector2(min_width, min_height)

# Fit panel to content
func fit_to_content():
    rect_size = get_minimum_size()
    _arrange_children()
    emit_signal("layout_changed")

# Get content rectangle (area available for children)
func get_content_rect() -> Rect2:
    return Rect2(
        container_margin_left,
        container_margin_top,
        rect_size.x - container_margin_left - container_margin_right,
        rect_size.y - container_margin_top - container_margin_bottom
    )

# Get panel rectangle (full panel area)
func get_panel_rect() -> Rect2:
    return Rect2(Vector2.ZERO, rect_size)

# Check if point is inside content area
func is_point_in_content(point: Vector2) -> bool:
    var content_rect = get_content_rect()
    return content_rect.has_point(point)

# Check if point is inside panel area
func is_point_in_panel(point: Vector2) -> bool:
    var panel_rect = get_panel_rect()
    return panel_rect.has_point(point)

# Convenience methods for margins
func set_uniform_margin(margin: float):
    set_container_margins(margin, margin, margin, margin)

func set_horizontal_margins(margin: float):
    set_container_margins(margin, container_margin_top, margin, container_margin_bottom)

func set_vertical_margins(margin: float):
    set_container_margins(container_margin_left, margin, container_margin_right, margin)

# Convenience methods for styling
func set_flat_style():
    """Set a flat, modern style"""
    corner_radius = 0.0
    border_width = 0.0
    shadow_enabled = false
    emit_signal("appearance_changed")

func set_rounded_style(radius: float = 8.0):
    """Set a rounded style"""
    corner_radius = radius
    border_width = 1.0
    shadow_enabled = false
    emit_signal("appearance_changed")

func set_card_style(radius: float = 6.0, shadow: bool = true):
    """Set a card-like style with optional shadow"""
    corner_radius = radius
    border_width = 0.0
    shadow_enabled = shadow
    if shadow:
        shadow_offset = Vector2(0.0, 2.0)
        shadow_blur = 8.0
        shadow_color = Color(0.0, 0.0, 0.0, 0.2)
    emit_signal("appearance_changed")

func set_inset_style():
    """Set an inset/depressed style"""
    corner_radius = 2.0
    border_width = 1.0
    border_color = Color(0.3, 0.3, 0.3, 1.0)
    panel_color = Color(0.15, 0.15, 0.15, 1.0)
    shadow_enabled = false
    emit_signal("appearance_changed")

func set_raised_style():
    """Set a raised/elevated style"""
    corner_radius = 4.0
    border_width = 1.0
    border_color = Color(0.6, 0.6, 0.6, 1.0)
    panel_color = Color(0.25, 0.25, 0.25, 1.0)
    shadow_enabled = true
    shadow_offset = Vector2(1.0, 1.0)
    shadow_blur = 3.0
    shadow_color = Color(0.0, 0.0, 0.0, 0.3)
    emit_signal("appearance_changed")

# Convenience methods for texture modes
func stretch_texture():
    set_texture_mode(TEXTURE_STRETCH)

func tile_texture():
    set_texture_mode(TEXTURE_TILE)

func keep_texture():
    set_texture_mode(TEXTURE_KEEP)

func center_texture():
    set_texture_mode(TEXTURE_KEEP_CENTERED)

func keep_aspect_texture():
    set_texture_mode(TEXTURE_KEEP_ASPECT)

func center_aspect_texture():
    set_texture_mode(TEXTURE_KEEP_ASPECT_CENTERED)

# Signals
signal layout_changed  # Emitted when layout properties change
signal appearance_changed  # Emitted when visual properties change
